module PointInPolygonSpec where
import PointInPolygon (pointInPoly)
import Data.List (intercalate)
import Test.Hspec

spec = describe "main" $ do
  it "Should handle a simple square" $ do
    let poly = [ (-5, -5), (5, -5)
               , (5, 5), (-5, 5)
               ]
    showAndTest poly (-6,0) False
    showAndTest poly (1,1) True
  it "should handle circle" $ do
    let poly = [(5.0,0.0),(4.990133642141358,0.31395259764656686),(4.9605735065723895,0.6266661678215213),(4.911436253643443,0.936906572928623),(4.842915805643155,1.2434494358242736),(4.755282581475768,1.5450849718747368),(4.648882429441257,1.8406227634233894),(4.524135262330098,2.1288964578253626),(4.381533400219318,2.4087683705085756),(4.221639627510076,2.6791339748949823),(4.045084971874738,2.9389262614623646),(3.852566213878947,3.1871199487434474),(3.644843137107059,3.4227355296434423),(3.422735529643445,3.6448431371070567),(3.18711994874345,3.852566213878945),(2.938926261462367,4.045084971874736),(2.6791339748949836,4.221639627510075),(2.4087683705085765,4.381533400219318),(2.1288964578253635,4.524135262330098),(1.8406227634233905,4.648882429441256),(1.5450849718747373,4.755282581475767),(1.2434494358242736,4.842915805643155),(0.9369065729286226,4.911436253643443),(0.6266661678215202,4.9605735065723895),(0.3139525976465654,4.990133642141358),(-1.914284349463475e-15,5.0),(-0.31395259764656813,4.990133642141358),(-0.6266661678215228,4.960573506572389),(-0.9369065729286252,4.911436253643443),(-1.2434494358242763,4.8429158056431545),(-1.54508497187474,4.755282581475767),(-1.840622763423393,4.648882429441255),(-2.1288964578253657,4.5241352623300966),(-2.408768370508579,4.3815334002193165),(-2.6791339748949863,4.221639627510074),(-2.938926261462369,4.045084971874735),(-3.187119948743452,3.8525662138789434),(-3.4227355296434467,3.6448431371070544),(-3.644843137107061,3.4227355296434396),(-3.8525662138789496,3.1871199487434443),(-4.045084971874741,2.9389262614623606),(-4.221639627510079,2.679133974894978),(-4.381533400219321,2.4087683705085703),(-4.5241352623301,2.1288964578253586),(-4.648882429441259,1.8406227634233847),(-4.75528258147577,1.5450849718747315),(-4.842915805643157,1.2434494358242676),(-4.911436253643445,0.9369065729286163),(-4.9605735065723895,0.626666167821514),(-4.990133642141358,0.31395259764655903),(-5.0,-6.049014748177263e-15),(-4.990133642141357,-0.31395259764657335),(-4.960573506572389,-0.6266661678215281),(-4.911436253643442,-0.9369065729286303),(-4.842915805643154,-1.2434494358242816),(-4.7552825814757655,-1.545084971874745),(-4.648882429441254,-1.840622763423398),(-4.524135262330094,-2.1288964578253715),(-4.381533400219314,-2.4087683705085845),(-4.221639627510071,-2.6791339748949894),(-4.045084971874732,-2.938926261462372),(-3.8525662138789407,-3.1871199487434554),(-3.6448431371070518,-3.42273552964345),(-3.4227355296434365,-3.6448431371070638),(-3.187119948743441,-3.8525662138789523),(-2.9389262614623557,-4.045084971874744),(-2.679133974894974,-4.221639627510081),(-2.4087683705085685,-4.381533400219323),(-2.128896457825353,-4.524135262330102),(-1.8406227634233807,-4.648882429441261),(-1.5450849718747253,-4.755282581475772),(-1.2434494358242636,-4.842915805643158),(-0.9369065729286101,-4.911436253643446),(-0.6266661678215097,-4.96057350657239),(-0.3139525976465527,-4.990133642141359),(1.2404191196141363e-14,-5.0),(0.3139525976465819,-4.990133642141357),(0.6266661678215344,-4.960573506572388),(0.9369065729286388,-4.911436253643441),(1.2434494358242876,-4.842915805643152),(1.5450849718747488,-4.755282581475764),(1.8406227634234038,-4.648882429441252),(2.128896457825375,-4.524135262330092),(2.4087683705085903,-4.38153340021931),(2.679133974894995,-4.221639627510068),(2.9389262614623792,-4.0450849718747275),(3.18711994874346,-3.8525662138789367),(3.4227355296434565,-3.6448431371070455),(3.644843137107068,-3.422735529643432),(3.852566213878958,-3.187119948743434),(4.045084971874747,-2.9389262614623526),(4.221639627510086,-2.6791339748949667),(4.381533400219326,-2.408768370508561),(4.5241352623301045,-2.1288964578253493),(4.648882429441264,-1.8406227634233727),(4.7552825814757735,-1.5450849718747215),(4.842915805643161,-1.2434494358242552),(4.911436253643447,-0.9369065729286059),(4.960573506572391,-0.6266661678215013),(4.990133642141359,-0.3139525976465486),(5.0,0.000000000001)]
    showAndTest poly (4,0) True
    showAndTest poly (4,4) False
  it "shold handle real polygon" $ do
    let poly = [(4.408969877748313,1.3091839574428178e-2),(2.8968703203718524,0.9999809305792399),(3.8178092384499713,2.8294626980148108),(2.5085887322576754,3.647501794827006),(1.105861407980481,3.4321242927799154),(-2.3347362300940734e-2,3.480661809625988),(-1.5634852960003436,4.281021253141307),(-2.1832186014717228,2.788577525538206),(-3.9419407592014686,2.8351676635408505),(-4.6985656603021155,1.5046024138360434),(-3.488235910477803,-0.10206855515683275),(-4.194886865900494,-1.4522728691445608),(-2.9145156933694376,-2.173605932403223),(-1.9129298439678977,-2.6668420611668395),(-1.074582517894969,-3.400922216194988),(0.12081479910659954,-4.272357918242433),(1.1942893886669714,-3.282949695446613),(3.0235755659984607,-3.8795014798505996),(3.7548241585538293,-2.6082659140804596),(3.609605042665552,-1.1609778759725244)]
    showAndTest poly (3.369503481537876,1.163130846197396) False

showAndTest poly point expect = do
  drawTest poly point expect
  pointInPoly poly point `shouldBe` expect

drawTest poly point inside = putStrLn div
  where
    div = concat [ "<div style='background:white; width:140px;'>"
                 , "<svg width='140' height='140'>"
                 , "<polygon points='" ++ intercalate " " points ++ "' stroke='blue' fill='white'></polygon>"
                 , "<circle cx='" ++ show cx ++ "' cy='" ++ show cy ++ "' r='2' fill='" ++ color ++ "'></circle>"
                 , "</svg>"
                 , "</div>"
                 ]
    points = map (showPt . transform) poly
    showPt (x,y) = show x ++ "," ++ show y
    (cx,cy) = transform point
    transform (x,y) = (t x, t y) where t i = (i + 7) * 10 + 0.5
    color = if inside then "green" else "red"
